Git 命令： 
git init
git commit -m "" 存储一个当前工作区的快照，-m表示提交参数附加message
git config --global user.name ""
git config --global user.email ""

git add <filename> ： 空格分开，可以写多个

git status : 查看工作区的状态
git diff ： 比较修改的文件

git log ： 查看提交记录，也就是查看有多少快照

HEAD ： 这是一个Git的指针，指向当前的工作区的版本。

git reset --hard "" : 可以快速回滚到其他版本。一般来说可以写commit id（用git log查看） 也可以写HEAD^ 或者HEAD~20(前20个版本)

git reflog ： 查看历史命令，以便确定要回滚到哪个版本

------------------------------------------------------------------------------------------------------------------------------------------
小结：
	（1）暂存区和工作区：暂存区index或者stage，在.git目录下。
	（2）工作区：当前编辑的文件
	（3）暂存区：git add将工作区文件提交到暂存区，这里保留你要修改的文件。
	（4）资源仓库：默认创建master branch，HEAD指向branch
	（5）Git记录的是修改而且不是文件，但是二进制文件只能记录大小等一些属性。
------------------------------------------------------------------------------------------------------------------------------------------

git checkout -- filename  用来丢弃当前修改：
（1）当文件已经add到stage中，则checkout -- 后就回到添加到暂存区后的状态；
（2）文件还没add到stage中，则checkout -- 后就回到和版本库一模一样的状态；
（3）总之，就是让这个文件回到最近一次git commit或git add时的状态。

PS : 1.撤销工作区的修改符合就近原则：
撤销工作区修改，如果缓冲区有该文件，则checkout -- file 会将缓冲区的内容覆盖到工作区，此时工作区和缓冲区文件内容相同，因此工作区是干净的，并没有未add的文件。

撤销工作区修改，如果缓冲区没有该文件，则checkout -- file命令会继续向上找，找到版本库中的该文件，此时使用版本库中的文件覆盖工作区，工作区不干净，因为有未提交的文件（从版本库中覆盖修改的文件）。

撤销缓冲区，使用git rest HEAD -- file ，则会将缓冲区的内容回退到工作区，此时缓冲区被该文件被移除，工作区不干净，有未add的文件（从缓冲区移除了，状态就变成了未add）



------------------------------------------------------------------------------------------------------------------------------------------

git reset HEAD filename  把暂存区的修改撤销掉（unstage）
（1）git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
（2）版本回退：git reset HEAD^ or git reset HEAD~2 or git rest commitId


------------------------------------------------------------------------------------------------------------------------------------------
git rm 删除文件
git rm 后需要git commit
如果想恢复删除的文件，可以git checkout -- filename

------------------------------------------------------------------------------------------------------------------------------------------

先产生SSH秘钥：

ssh-keygen -t rsa -C "qiesai@163.com"
#注意点：在ssh-keygen过程中
第一步：要输入ssh key的存放地址，这个过程如果自己改动了，则ssh文件不会存储到c://<user>/<username>/.ssh文件夹里面了。会导致后面的git push 出问题
如果想自己指定
则可以按照下面的方式解决
ssh -T 


#推送Git资源
git remote origin git@github.com:saillen/hellogit.git
#远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。

#首次推送带有-u参数
git push -u origin master
#剩下的推送，将master内容推送到origin分支（远程仓库）
git push origin master

------------------------------------------------------------------------------------------------------------------------------------------

使用clone命令
git clone git@github.com:saillen/MyJavaWebLib.git

还可以使用http或者https协议，默认是ssh协议，即：git://
git协议最快

------------------------------------------------------------------------------------------------------------------------------------------
Git 分支：branch 

git checkout -d dev 相当于：
git branch dev
git checkout dev




Git 命令： 
git init
git commit -m "" 存储一个当前工作区的快照，-m表示提交参数附加message
git config --global user.name ""
git config --global user.email ""

git add <filename> ： 空格分开，可以写多个

git status : 查看工作区的状态
git diff ： 比较修改的文件

git log ： 查看提交记录，也就是查看有多少快照

HEAD ： 这是一个Git的指针，指向当前的工作区的版本。

git reset --hard "" : 可以快速回滚到其他版本。一般来说可以写commit id（用git log查看） 也可以写HEAD^ 或者HEAD~20(前20个版本)

git reflog ： 查看历史命令，以便确定要回滚到哪个版本

------------------------------------------------------------------------------------------------------------------------------------------
小结：
	（1）暂存区和工作区：暂存区index或者stage，在.git目录下。
	（2）工作区：当前编辑的文件
	（3）暂存区：git add将工作区文件提交到暂存区，这里保留你要修改的文件。
	（4）资源仓库：默认创建master branch，HEAD指向branch
	（5）Git记录的是修改而且不是文件，但是二进制文件只能记录大小等一些属性。
------------------------------------------------------------------------------------------------------------------------------------------

git checkout -- filename  用来丢弃当前修改：
（1）当文件已经add到stage中，则checkout -- 后就回到添加到暂存区后的状态；
（2）文件还没add到stage中，则checkout -- 后就回到和版本库一模一样的状态；
（3）总之，就是让这个文件回到最近一次git commit或git add时的状态。

PS : 1.撤销工作区的修改符合就近原则：
撤销工作区修改，如果缓冲区有该文件，则checkout -- file 会将缓冲区的内容覆盖到工作区，此时工作区和缓冲区文件内容相同，因此工作区是干净的，并没有未add的文件。

撤销工作区修改，如果缓冲区没有该文件，则checkout -- file命令会继续向上找，找到版本库中的该文件，此时使用版本库中的文件覆盖工作区，工作区不干净，因为有未提交的文件（从版本库中覆盖修改的文件）。

撤销缓冲区，使用git rest HEAD -- file ，则会将缓冲区的内容回退到工作区，此时缓冲区被该文件被移除，工作区不干净，有未add的文件（从缓冲区移除了，状态就变成了未add）



------------------------------------------------------------------------------------------------------------------------------------------

git reset HEAD filename  把暂存区的修改撤销掉（unstage）
（1）git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
（2）版本回退：git reset HEAD^ or git reset HEAD~2 or git rest commitId


------------------------------------------------------------------------------------------------------------------------------------------
git rm 删除文件
git rm 后需要git commit
如果想恢复删除的文件，可以git checkout -- filename

------------------------------------------------------------------------------------------------------------------------------------------

先产生SSH秘钥：

ssh-keygen -t rsa -C "qiesai@163.com"
#注意点：在ssh-keygen过程中
第一步：要输入ssh key的存放地址，这个过程如果自己改动了，则ssh文件不会存储到c://<user>/<username>/.ssh文件夹里面了。会导致后面的git push 出问题
如果想自己指定
则可以按照下面的方式解决
ssh -T 


#推送Git资源
git remote origin git@github.com:saillen/hellogit.git
#远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。

#首次推送带有-u参数
git push -u origin master
#剩下的推送，将master内容推送到origin分支（远程仓库）
git push origin master

------------------------------------------------------------------------------------------------------------------------------------------

使用clone命令
git clone git@github.com:saillen/MyJavaWebLib.git

还可以使用http或者https协议，默认是ssh协议，即：git://
git协议最快

------------------------------------------------------------------------------------------------------------------------------------------
Git 分支：branch 

git checkout -d dev 相当于：
git branch dev
git checkout dev

git 鼓励使用分支

git branch : 查看当前分支
git branch <name> : 创建分支
git branch -d name : 删除分支
git merge <name> 合并分支：Fast-forward模式
git checkout -b name : 创建并切换分支

------------------------------------------------------------------------------------------------------------------------------------------
git 解决aa冲突方法

git merge命令会提示冲突

git log --graph --pretty=oneline --abbrev-commit

git merget --on--ff 禁止使用Fast forward模式，这样合并有分支历史可以看
git merge --on--ff -m "合并信息" <branchName>

------------------------------------------------------------------------------------------------------------------------------------------
暂存工作区
git stash（存储）

git stash ： 将当前工作区存储，要注意是哪个分支

git checkout master : 切换到master分支
git checkout -b bugfix : 从master分支创建一个bugfix分支
…… 这里修改文件

git checkout master : 切回master分支
git merge --no--ff -m "修改了bug" bugfix

…… 切回去继续

git branck -d bugfix
git checkout dev

git stash list （查看stash列表）
git stash apply stash@{0} (恢复但是不删除stash的内容)
git stash drop stash@{0} (删除stash中的内容)

上面的三部等同于
git stash pop


git branch -D <name> 强行删除

------------------------------------------------------------------------------------------------------------------------------------------
git pull <remote> <branch>

git branch --set-upstream dev origin/dev : 指定本地分支和远程分支的链接


多人合作模式：
首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！


如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

------------------------------------------------------------------------------------------------------------------------------------------

git tag <tagName> ： 给当前branch 打标签，还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：

git tag : 查看标签列表

git show <tagname> ： 


还可以通过-s用私钥签名一个标签，签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：


Deleted tag 'v0.1' (was e078af9)

推送某个标签到远程：
git push origin <tagname>：
者，一次性推送全部尚未推送到远程的本地标签：
git push origin --tags


删除远程标签就麻烦一点，先从本地删除：

git tag -d v0.9
git push origin :refs/tags/v0.9


------------------------------------------------------------------------------------------------------------------------------------------

比如，让Git显示颜色，会让命令输出看起来更醒目

 git config --global color.ui true
 
 
 
 .gitignore
 
 
 不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore
 
 忽略文件的原则是：

忽略操作系统自动生成的文件，比如缩略图等；
忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。


------------------------------------------------------------------------------------------------------------------------------------------
如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。


我们只需要敲一行命令，告诉Git，以后st就表示status：
git config --global alias.st status


------------------------------------------------------------------------------------------------------------------------------------------



甚至还有人丧心病狂地把lg配置成了：

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"


配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中